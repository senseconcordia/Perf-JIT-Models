#install.packages("foreign")
#install.packages("caret")
#install.packages("car")
#install.packages("nlme")
#install.packages("rms")
#install.packages("e1071")
#install.packages("BiodiversityR")
#install.packages("moments")
#install.packages("randomForest")
#install.packages("dplyr")
#install.packages("DMwR")

#library(foreign)
#library(caret)
#library(car)
#library(nlme)
#library(rms)
#library(e1071)
#library(BiodiversityR)
#library(moments)
#library(randomForest)
#library(dplyr)
#library(DMwR)

data <- read.csv("data/raw_cassandra.csv", header=T,sep=",")
data <- subset(data, select = -c(author_date,author_name,author_date_unix_timestamp,author_email,commit_message,fix,classification,linked,fixes,fileschanged,repository_id,glm_probability,rf_probability,issue_id,issue_date,issue_type))
#data$contains_bug = as.factor(data$contains_bug)
data <- data[,colSums(is.na(data))<nrow(data)]
#data <- SMOTE(contains_bug~., data, perc.over=100)
#data$contains_bug = as.numeric(levels(data$contains_bug))[data$contains_bug]

k=10 #Folds

id <- sample(1:k,nrow(data),replace=TRUE)
list <- 1:k
trainingset <- data.frame()
testset <- data.frame()

fit=c();

precision=c();
recall=c();
precision_rf=c();
recall_rf=c();

for (i in 1:k)
{
  
  trainingset <- subset(data, id %in% list[-i])
  trainingset <- subset(trainingset, select = -c(commit_hash))
  testset <- subset(data, id %in% c(i))
  file2 <- paste("cassandra_test_", i, sep="")
  file2 <- paste(file2, ".csv", sep="")
  write.csv(testset, file2, row.names = FALSE)
  
  testset <- subset(testset, select = -c(commit_hash))
  
  trainingset <- SMOTE(contains_bug~., data, perc.over=100)

  drop=c("contains_bug")
  
  independant=trainingset[,!(names(trainingset) %in% drop)]
  
  ##########correlation 
  correlations <- cor(independant, method="spearman") 
  highCorr <- findCorrelation(correlations, cutoff = .75)
  
  low_cor_names=names(independant[, -highCorr])
  low_cor_data= independant[(names(independant) %in% low_cor_names)]
  dataforredun=low_cor_data
  
  #########start redun
  redun_obj = redun (~. ,data = dataforredun ,nk =0)
  after_redun= dataforredun[,!(names(dataforredun) %in% redun_obj $Out)]
  
  ############model
  form=as.formula(paste("contains_bug>0~",paste(names(after_redun),collapse="+")))
  model=glm(formula=form, data=log10(trainingset+1), family = binomial(link = "logit"))
  
  file <- paste("cassandra_prediction_", i, sep="")
  file <- paste(file, ".csv", sep="")
  predictions <- predict(model, log10(testset+1) ,type="response")
  TP = sum((predictions>0.5) & (testset$contains_bug>0))
  FP = sum((predictions>0.5) & (testset$contains_bug==0))
  
  precision[i] = TP / sum((predictions>0.5))
  recall[i] = TP / sum(testset$contains_bug>0)
  
  fit[i]=1- model$deviance/model$null.deviance
  
  rf.fit= randomForest(x=log10(after_redun+1), y=as.factor(trainingset$contains_bug>0), ntree=100, type='classification', importance=TRUE)
  rf_predictions <- predict(rf.fit, log10(testset+1),type="response")
  
  TP_rf = sum((rf_predictions=="TRUE") & (testset$contains_bug>0))
  FP_rf = sum((rf_predictions=="TRUE") & (testset$contains_bug==0))
  
  precision_rf[i] = TP_rf / sum((rf_predictions=="TRUE"))
  recall_rf[i] = TP_rf / sum(testset$contains_bug>0)
  
  write.csv(predictions, file, row.names = FALSE)
  
}



